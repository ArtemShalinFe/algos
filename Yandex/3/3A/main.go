package main

import (
	"bufio"
	"os"
	"strconv"
)

type App struct {
	res []string
}

/*
–ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∫—Ä—ã–≤–∞—é—â—É—é —Å–∫–æ–±–∫—É, —Ç–æ –º—ã —Å—Ç–∞–≤–∏–º –µ—ë.
–ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –µ—Å–ª–∏ –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞–∫—Ä—ã–≤–∞—é—â—É—é —Å–∫–æ–±–∫—É, —Ç–æ –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –º—ã —Å—Ç–∞–≤–∏–º –∏ –µ—ë.
–¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º —Å—Ç—Ä–æ–∫–∏ –±—É–¥—É—Ç –≤—ã–≤–µ–¥–µ–Ω—ã –≤ –ª–µ–∫—Å–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ,
—Ç–∞–∫ –∫–∞–∫ —Å–Ω–∞—á–∞–ª–∞ –º—ã –º—ã –ø—ã—Ç–∞–µ–º—Å—è –ø–æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∫—Ä—ã–≤–∞—é—â—É—é —Å–∫–æ–±–∫—É.
–ü—Ä–∏ —ç—Ç–æ–º –º—ã –ø–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö —Å–∫–æ–±–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –ø—Ä–µ—Ñ–∏–∫—Å–∞ ùöäùöóùöú,
–∞ —Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ–∂–Ω—ã–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Å–∫–æ–±–æ—á–Ω—ã–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
*/
func (a *App) solution(n int) []string {
	a.genBrackets(n, 0, 0, "")
	return a.res
}

func (a *App) genBrackets(n int, open int, close int, prefix string) {
	if open+close == 2*n {
		a.res = append(a.res, prefix)
		return
	}
	if open < n {
		a.genBrackets(n, open+1, close, prefix+"(")
	}
	if open > close {
		a.genBrackets(n, open, close+1, prefix+")")
	}
}

func main() {
	scanner := makeScanner()
	n := readInt(scanner)
	app := &App{
		res: make([]string, 0),
	}
	printArray(app.solution(n))
}

func makeScanner() *bufio.Scanner {
	const maxCapacity = 3 * 1024 * 1024
	buf := make([]byte, maxCapacity)
	scanner := bufio.NewScanner(os.Stdin)
	scanner.Buffer(buf, maxCapacity)
	return scanner
}

func printArray(arr []string) {
	writer := bufio.NewWriter(os.Stdout)
	for i := 0; i < len(arr); i++ {
		writer.WriteString(arr[i])
		writer.WriteString("\n")
	}
	writer.Flush()
}

func readInt(scanner *bufio.Scanner) int {
	scanner.Scan()
	stringInt := scanner.Text()
	res, _ := strconv.Atoi(stringInt)
	return res
}
